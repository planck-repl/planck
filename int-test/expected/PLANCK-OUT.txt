Repeated ordered -e and -i, supressing nil
foo
:a
bar
2
foo
Repeated ordered -e and -i, supressing nil, classpath resources @
foo
:a
bar
2
foo
Repeated ordered -e and -i, supressing nil, classpath resources @/
foo
:a
bar
2
foo
Test :cljs/quit
1
Test quit
1
Test exit
1
Exit on first error
true
ok
Execution error (Error) at (<cljs repl>:1).
x
Multi-line data
[1 2]
Multi-line string
"abc\ndef"
space before and after
3
Test print to stderr
nil
Test main
5
0
Test main zero
0
Test main one
0
Test main unhandled
1
Test main exit
17
Test main cli fn
"Hello" "World"
Test main cli fn zero
0
Test main cli fn one
0
Test main cli fn unhandled
1
Test main cli fn exit
17
Test REPL exit
nil
118
Test call fn exit
nil
119
Test run file with exit
111
Test run file directly
:run-file.core/hello
Test run file classpath resource @
:run-file.core/hello
Test run file classpath without @
Execution error (Error) at (<cljs repl>:1).
Could not load file run_file/core.cljs
Test run file classpath resource @/
:run-file.core/hello
Test run malformed expression
Syntax error reading source at (<cljs repl>:1).
Unmatched delimiter ].
Test run malformed script
Syntax error reading source at (<cljs repl>:1).
Unmatched delimiter ].
Test in-ns
nil
nil
nil
#'alpha.beta/x
nil
#'gamma.delta/y
nil
#{:a}
nil
nil
#{:a}
Test require REPL special
nil
true
nil
nil
true
Test require REPL special exit in file
195
Test require :reload in changing spec
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload-all
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload with cache
nil
nil
nil
:initial
nil
:initial
nil
nil
:reloaded
Test require-macros unknown ns
Execution error (ExceptionInfo) at (<cljs repl>:1).
No such macros namespace: unknown-ns.core, could not locate unknown_ns/core.clj or unknown_ns/core.cljc
Test spec cache
nil
true
false
nil
true
false
Test require-macros REPL special
nil
5
Test dir
nil
#'foo.bar/xfirst
#'foo.bar/nfirst
#'foo.bar/macro-crazy
nil
#'foo.bar/somemacro
nil
macro-crazy
somemacro
xfirst
nil
nil
keywordize-keys
postwalk
postwalk-replace
prewalk
prewalk-replace
stringify-keys
walk
nil
Test doc
nil
-------------------------
cljs.core/inc
([x])
  Returns a number one greater than num.
nil
-------------------------
cljs.core/when
([test & body])
Macro
  Evaluates test. If logical true, evaluates body in an implicit do.
nil
-------------------------
if
   (if test then else?)
Special Form
  Evaluates test. If not the singular values nil or false,
  evaluates and yields then, otherwise, evaluates and yields else. If
  else is not supplied it defaults to nil.

  Please see http://clojure.org/special_forms#if
nil
-------------------------
try
   (try expr* catch-clause* finally-clause?)
Special Form
  catch-clause => (catch classname name expr*)
  finally-clause => (finally expr*)
  Catches and handles JavaScript exceptions.

  Please see http://clojure.org/special_forms#try
nil
nil
-------------------------
planck.repl/doc
([sym])
Macro
  Prints documentation for a var or special form given its name
nil
-------------------------
planck.repl/doc
([sym])
Macro
  Prints documentation for a var or special form given its name
nil
-------------------------
cljs.core/fn
   (fn name? [params*] exprs*)
   (fn name? ([params*] exprs*) +)
Macro
  params => positional-params* , or positional-params* & next-param
  positional-param => binding-form
  next-param => binding-form
  name => symbol

  Defines a function
nil
-------------------------
cljs.core/IWriter
Protocol
  Protocol for writing. Currently only implemented by StringBufferWriter.

  -write
  ([writer s])
  Writes s with writer and returns the result.

  -flush
  ([writer])
  Flush writer.
nil
#'cljs.user/f
-------------------------
cljs.user/f
([param])
  docstring
nil
nil
-------------------------
test-doc-source.core/my-function
([x])
  This is a cool
  function with a docstring.
nil
-------------------------
test-doc-source.core/my-function
([x])
  This is a cool
  function with a docstring.
nil
-------------------------
test-doc-source.core
  This is the namespace
  docstring for test-doc-source.core
nil
Test source
Source not found
nil
(defn inc
  "Returns a number one greater than num."
  [x] (cljs.core/+ x 1))
nil
(core/defmacro when
     "Evaluates test. If logical true, evaluates body in an implicit do."
     [test & body]
     (core/list 'if test (cons 'do body)))
nil
Source not found
nil
nil
(defn my-function
  "This is a cool
  function with a docstring."
  [x]
  (* x x))
nil
(defn my-function
  "This is a cool
  function with a docstring."
  [x]
  (* x x))
nil
nil
(defonce
  ^{:dynamic true
    :private true}
  *reader-fn*
  (fn [_]
    (throw (js/Error. "No *reader-fn* fn set."))))
nil
Test pst special
nil
true
#'cljs.user/f
#'cljs.user/g
Execution error (Error) at (<cljs repl>:1).
whoah
whoah
nil
#'cljs.user/e
Execution error (Error) at (<cljs repl>:1).
ouch
ouch
nil
whoah
nil
Test load-file REPL special
nil
true
nil
3
4
Test load-file from classpath - expect this to fail
Execution error (Error) at (<cljs repl>:1).
Could not load file test_load_file/core.cljs
nil
Test load REPL special
nil
nil
true
Test doc support for load-file REPL special
-------------------------
load-file
([name])
REPL Special Function
  Sequentially read and evaluate the set of forms contained in the file.
nil
Test load-file REPL bad filename
Execution error (Error) at (<cljs repl>:1).
Could not load file int-test/src/test_load_file/nofile.cljs
nil
Test load-file REPL error in file
nil
Test load-file REPL exit in file
132
Shell with-sh-dir
nil
"/\n"
nil
"/\n"
Shell stderr
nil
#{[:err "this is from stderr\n"] [:exit 0] [:out ""]}
reader and read-line
nil
#'cljs.user/test-read
nil
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
"b"
nil
nil
"a"
"b"
nil
nil
reader and line-seq
nil
#'cljs.user/test-read
nil
nil
("a")
nil
("a")
nil
("a")
nil
("a" "b")
nil
("a" "b")
nil
writer
nil
#'cljs.user/test-write
true
true
true
true
true
true
writer append
nil
#'cljs.user/test-write
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
Test write and read binary
nil
#'cljs.user/binary-file
nil
[1 2 3]
nil
nil
[1 2 3 4 5 6]
nil
nil
[7 8 9 10]
nil
nil
Test encoding
nil
#'cljs.user/content
#'cljs.user/filename
nil
true
Test file-seq
nil
/tmp/PLANCK_FILE_SEQ
/tmp/PLANCK_FILE_SEQ/A
/tmp/PLANCK_FILE_SEQ/A/B
/tmp/PLANCK_FILE_SEQ/A/B/E
/tmp/PLANCK_FILE_SEQ/A/B/F
/tmp/PLANCK_FILE_SEQ/A/C
/tmp/PLANCK_FILE_SEQ/A/C/G
/tmp/PLANCK_FILE_SEQ/A/D
nil
Test Google Closure index
nil
Test availability of goog libs
nil
#object[Object http://foo.com]
Test empty list of *command-line-args*
nil
nil
nil
Test empty list of *command-line-args* following main opt
nil
nil
nil
Treat init opts that follow -r main opt as *command-line-args* instead of evaluating them
nil
("-c" "src" "-e" "(println \"hi\")" "-v")
("-c" "src" "-e" "(println \"hi\")" "-v")
Treat init opts that follow nice -m ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow nice --main=ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow less nice -mns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat main opts that follow a main opt as *command-line-args* instead of evaluating them
nil
("-" "-m" "test-main.args" "-r")
("-" "-m" "test-main.args" "-r")
Test *command-line-args* with nice clumped init opts
hi
nil
("here" "are" "some" "args")
("here" "are" "some" "args")
Test *command-line-args* with less nicely clumped init opts
hi
nil
("here" "are" "some" "args")
("here" "are" "some" "args")
Test binding of *command-line-args* in file run from command line
(here are some args)
(here are some args)
0
Test binding of *command-line-args* in file run from command line, passing through short opts
(here -f are -k some -sL args)
(here -f are -k some -sL args)
0
Test classpath
nil
:src
nil
:src2
Test classpath env var
nil
:src
nil
:src2
Test JAR support
nil
"Hello, from JAR"
Test reader
#js [1 2]
#inst "2015-08-18T01:53:14.614-00:00"
Syntax error reading source at (<cljs repl>:1).
Set literal contains duplicate key: 1
Syntax error reading source at (<cljs repl>:1).
Map literal contains duplicate key: 1
Test verbose
5
Test restore state when require fails
Execution error (ExceptionInfo) at (<cljs repl>:1).
Invalid :refer, var clojure.set/diff does not exist
nil
Test eval
nil
1
3
#'cljs.user/a
3
17
#'cljs.user/a
#'cljs.user/addition-list
3
13
#'cljs.user/lucky-number
13
#'cljs.user/square
#'cljs.user/cube
64
5
#'cljs.user/addition-list2
3
4
Ensure we can get into Planck REPL ns and ns are loaded
nil
nil
false
Test timers keeps script going
start
end
from timer
Test sh-async keeps script going
start
end
from sh-async
Can exit with timer
start
nil
1
end
nil
Test chained timer and sh-async keeps script going
5
{:exit 0, :out "", :err ""}
4
{:exit 0, :out "", :err ""}
3
{:exit 0, :out "", :err ""}
2
{:exit 0, :out "", :err ""}
1
Test clear timeout lets script stop
:done
Test clear interval lets script stop
:tick
:tick
:done
Disable asserts
nil
Testing console logging
log
trace
debug
info
Testing low-level print-fns
nulltruea1[
 1,
 2
]{
 "foo": 1
}
Test cljs.nodejs
nil
nil
hi
nil
Test get-arglist
nil
#'foo.core/fun
([arg1 arg2])
([f coll] [f val coll])
Test in 'a' namespace
nil
#'a.core/a
3
Forms should be evaluated in global scope
true
Execution error (ReferenceError) at (<cljs repl>:1).
Can't find variable: source
Execution error (ReferenceError) at (<cljs repl>:1).
Can't find variable: a
Auto-load user.cljs
3
